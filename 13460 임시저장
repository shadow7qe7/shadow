//https://wandbox.org

#include<bits/stdc++.h>
using namespace std;
int n,m;
int arrive_x, arrive_y;
int t[4]=[0,1,0,-1],tt[4]=[1,0,-1,0];//상,우,하,좌
int a[15][15];
void f(red_x,red_y,blue_x,blue_y,cnt)
{
    //왼쪽이라 가정
    //이동함수
    for(int k=0;k<4;k++)
    {
        int ax=t[k],ay=tt[k];
        while(1)
        {
            if(a[red_x+ax][red_y+ay]==0)redisblock=1;
            if(a[blue_x+ax][blue_y+ay]==0)blueisblock=1;
            //red&blue is block -> break
            //red | blue is not block -> continue
            if(redisblock&&blueisblock)break;//둘 다 막혀있으면 탈출
            //안 막혀있으면
            if(a[red_x+ax][red_y+ay]&&redisarrive==0)
            {
                a[red_x+ax][red_y+ay]=0;//이동하면 벽으로 변경
                a[red_x][red_y]=1;//이동하면 통로로 변경
                red_x+=ax;
                red_y+=ay;
                red_count++;
            }
            if(a[blue_x+ax][blue_y+ay])
            {
                a[blue_x+ax][blue_y+ay]=0;
                a[blue_x+ax][blue_y+ay]=1;
                blue_x+=ax;
                blue_y+=ay;
                blue_count++;
            }
            if(red_x==arrive_x&&red_y==arrive_y)
            {//레드가 도착하더라도 블루의 결과를 확인해야됨
                redisarrive=1;
                a[red_x][red_y]=1;
            }
            if(blue_x==arrive_x&&blue_y==arrive_y)return;//블루는 도착하는 순간 fail
        }
        void f(red_x,red_y,blue_x,blue_y,++cnt);
        for(int i=0;i<red_count;i++)
            a[red_x--][red_y]=1;//지나온자리 다시 통로화
        a[red_x][red_y]=0;
        for(int i=0;i<blue_count;i++)
            a[blue_x--][blue_y]=1;
        a[blue_x][blue_y]=0;
    }
    return ;
}
int main()
{
    cin>>n>>m;
    for(int i=1;i<=n;i++)
    {
        string s;
        cin>>s;
        for(int j=1;j<=m;j++)
        {
            if(s[j]=='.')a[i][j]=1;
            if(s[j]=='R')
            {
                //a[i][j]=0;
                red_x=n;
                red_y=j;
            }
            if(s[j]=='B')
            {
                //a[i][j]=0;
                blue_x=n;
                blue_y=j;
            }
            
            if(s[j]=='O')
            {
                a[i][j]=1;
                arrive_x=n;
                arrive_y=j;
            }
            ///if(s[j]=='#')a[i][j]=0;
            ///a[i][j]=0 이면 벽
        }
            
    }
    return 0;
}
//4방위로 레드와 블루가 동시에 움직이되 '차'처럼 거리엔 제한이 없음
//재귀를 이용해서 모든 경우의 수를 찾음과 동시에 블루와 함께 움직이기
//예를들어 왼쪽으로 이동했을때 .RB -> 레드 움직인 후 블루
//블루입장에선 레드가 벽, 레드가 움직이면 블루입장에서 빈공간이됨
//.RB -> R.B -> RB. 이렇게 바뀜
//그래서 움직일 경우
/*
#RB#
##.#
-> 아래로 이동
#R.#
##B#
-> 우측으로 이동
#.R#
##B#
*/
//그래서 결론
// 둘다 이동이 가능하면 둘다 움직이고
//둘 중에 하나만 이동이 가능하면 그것 먼저 움직인 뒤 다른 하나를 움직이고
//둘다 이동이 불가능하면 패스한다
//1이 아니면 무조건 다 벽

/* 2안
    4방위 중 한개의 방위로 이동할때
    한칸씩 세면서 이동하기
    둘 다 못움직일때 스텝이 넘어간다
이동방식 설립 끝
재귀로 모든 구간??
#####
##.##
#RBO#
#####
    */
